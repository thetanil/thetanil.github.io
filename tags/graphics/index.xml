<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Graphics on Theta Nil's Site</title><link>https://thetanil.github.io/tags/graphics/</link><description>Recent content in Graphics on Theta Nil's Site</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 08 Oct 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://thetanil.github.io/tags/graphics/index.xml" rel="self" type="application/rss+xml"/><item><title>JavaScript Generated SVG with Normalized Coordinates</title><link>https://thetanil.github.io/posts/svg_002/</link><pubDate>Wed, 08 Oct 2025 00:00:00 +0000</pubDate><guid>https://thetanil.github.io/posts/svg_002/</guid><description>&lt;h1 id="javascript-generated-svg-with-fragment-shader-like-coordinates"&gt;JavaScript Generated SVG with Fragment Shader-like Coordinates&lt;/h1&gt;
&lt;p&gt;This post demonstrates how to generate SVG content with JavaScript using normalized coordinates (-1 to 1) similar to fragment shaders.&lt;/p&gt;
&lt;div id="svg-container" style="width: 100%; height: 100vh; margin: 0; padding: 0;"&gt;&lt;/div&gt;
&lt;script&gt;
// Fragment shader-like functions
function length(x, y) {
 return Math.sqrt(x * x + y * y);
}

function mix(a, b, t) {
 return a * (1 - t) + b * t;
}

function smoothstep(edge0, edge1, x) {
 const t = Math.max(0, Math.min(1, (x - edge0) / (edge1 - edge0)));
 return t * t * (3 - 2 * t);
}

function fract(x) {
 return x - Math.floor(x);
}

function sin(x) {
 return Math.sin(x);
}

function cos(x) {
 return Math.cos(x);
}

// Convert normalized coordinates (-1 to 1) to SVG coordinates
function normToSvg(nx, ny, width, height) {
 const x = (nx + 1) * width * 0.5;
 const y = (-ny + 1) * height * 0.5; // Flip Y for SVG coordinate system
 return { x, y };
}

// Convert color components (0-1) to RGB string
function colorToRgb(r, g, b, a = 1) {
 return `rgba(${Math.floor(r * 255)}, ${Math.floor(g * 255)}, ${Math.floor(b * 255)}, ${a})`;
}

// Create a fragment shader-like pattern
function fragmentShader(nx, ny, time) {
 // Distance from center
 const dist = length(nx, ny);
 
 // Angle
 const angle = Math.atan2(ny, nx);
 
 // Create some patterns
 const rings = sin(dist * 10 - time * 2) * 0.5 + 0.5;
 const spiral = sin(angle * 8 + dist * 20 - time * 3) * 0.5 + 0.5;
 const waves = sin(nx * 10 + time) * sin(ny * 10 + time) * 0.5 + 0.5;
 
 // Combine patterns
 const r = rings * 0.8 + 0.2;
 const g = spiral * 0.6 + 0.4;
 const b = waves * 0.9 + 0.1;
 
 return { r, g, b };
}

function createSVGPattern() {
 const container = document.getElementById('svg-container');
 const width = window.innerWidth;
 const height = window.innerHeight;
 
 // Create SVG element
 const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
 svg.setAttribute('width', width);
 svg.setAttribute('height', height);
 svg.setAttribute('viewBox', `0 0 ${width} ${height}`);
 svg.style.display = 'block';
 
 // Resolution for the pattern (adjust for performance vs quality)
 const resolution = 100;
 const pixelWidth = width / resolution;
 const pixelHeight = height / resolution;
 
 // Get current time for animation
 const time = Date.now() * 0.001;
 
 // Generate pattern
 for (let i = 0; i &lt; resolution; i++) {
 for (let j = 0; j &lt; resolution; j++) {
 // Convert to normalized coordinates (-1 to 1)
 const nx = (i / resolution) * 2 - 1;
 const ny = (j / resolution) * 2 - 1;
 
 // Get color from fragment shader
 const color = fragmentShader(nx, ny, time);
 
 // Create rectangle for this "pixel"
 const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
 rect.setAttribute('x', i * pixelWidth);
 rect.setAttribute('y', j * pixelHeight);
 rect.setAttribute('width', pixelWidth);
 rect.setAttribute('height', pixelHeight);
 rect.setAttribute('fill', colorToRgb(color.r, color.g, color.b));
 
 svg.appendChild(rect);
 }
 }
 
 // Clear container and add SVG
 container.innerHTML = '';
 container.appendChild(svg);
}

// Higher resolution example with circles
function createHighResPattern() {
 const container = document.getElementById('svg-container');
 const width = window.innerWidth;
 const height = window.innerHeight;
 
 const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
 svg.setAttribute('width', width);
 svg.setAttribute('height', height);
 svg.setAttribute('viewBox', `0 0 ${width} ${height}`);
 svg.style.display = 'block';
 
 const time = Date.now() * 0.001;
 const numCircles = 50;
 
 // Create animated circles using normalized coordinates
 for (let i = 0; i &lt; numCircles; i++) {
 const t = i / numCircles;
 
 // Use normalized coordinates for positioning
 const nx = sin(time + t * Math.PI * 2) * 0.8;
 const ny = cos(time * 1.3 + t * Math.PI * 2) * 0.8;
 
 // Convert to SVG coordinates
 const pos = normToSvg(nx, ny, width, height);
 
 // Create circle
 const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
 circle.setAttribute('cx', pos.x);
 circle.setAttribute('cy', pos.y);
 circle.setAttribute('r', 10 + sin(time * 2 + t * 10) * 5);
 
 // Color based on normalized position
 const dist = length(nx, ny);
 const hue = (t * 360 + time * 50) % 360;
 circle.setAttribute('fill', `hsl(${hue}, 70%, ${60 + dist * 40}%)`);
 circle.setAttribute('opacity', 0.7);
 
 svg.appendChild(circle);
 }
 
 container.innerHTML = '';
 container.appendChild(svg);
}

// Mandelbrot-like pattern using normalized coordinates
function createMandelbrotPattern() {
 const container = document.getElementById('svg-container');
 const width = window.innerWidth;
 const height = window.innerHeight;
 
 const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
 svg.setAttribute('width', width);
 svg.setAttribute('height', height);
 svg.setAttribute('viewBox', `0 0 ${width} ${height}`);
 svg.style.display = 'block';
 
 const resolution = 200;
 const pixelWidth = width / resolution;
 const pixelHeight = height / resolution;
 
 // Mandelbrot-like iteration
 function mandelbrot(cx, cy, maxIter = 20) {
 let x = 0, y = 0;
 let iter = 0;
 
 while (x * x + y * y &lt;= 4 &amp;&amp; iter &lt; maxIter) {
 const temp = x * x - y * y + cx;
 y = 2 * x * y + cy;
 x = temp;
 iter++;
 }
 
 return iter / maxIter;
 }
 
 for (let i = 0; i &lt; resolution; i++) {
 for (let j = 0; j &lt; resolution; j++) {
 // Normalized coordinates
 const nx = (i / resolution) * 3 - 1.5; // Zoom into interesting area
 const ny = (j / resolution) * 3 - 1.5;
 
 const value = mandelbrot(nx, ny);
 
 const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
 rect.setAttribute('x', i * pixelWidth);
 rect.setAttribute('y', j * pixelHeight);
 rect.setAttribute('width', pixelWidth);
 rect.setAttribute('height', pixelHeight);
 
 // Color mapping
 const hue = value * 360 + 200;
 const sat = value &gt; 0.95 ? 0 : 70;
 const light = value * 60 + 20;
 rect.setAttribute('fill', `hsl(${hue}, ${sat}%, ${light}%)`);
 
 svg.appendChild(rect);
 }
 }
 
 container.innerHTML = '';
 container.appendChild(svg);
}

// Initialize with pattern
createSVGPattern();

// Animation loop
function animate() {
 createSVGPattern();
 requestAnimationFrame(animate);
}

// Uncomment to enable animation (warning: may be CPU intensive)
// animate();

// Handle window resize
window.addEventListener('resize', () =&gt; {
 createSVGPattern();
});
&lt;/script&gt;
&lt;h2 id="control-panel"&gt;Control Panel&lt;/h2&gt;
&lt;p&gt;Try different patterns:&lt;/p&gt;</description></item><item><title>SVG Shape Example</title><link>https://thetanil.github.io/posts/svg_001/</link><pubDate>Wed, 08 Oct 2025 00:00:00 +0000</pubDate><guid>https://thetanil.github.io/posts/svg_001/</guid><description>&lt;h1 id="svg-shape-display"&gt;SVG Shape Display&lt;/h1&gt;
&lt;p&gt;Here&amp;rsquo;s an example of displaying SVG shapes directly in a Hugo markdown post.&lt;/p&gt;
&lt;h2 id="inline-svg-example"&gt;Inline SVG Example&lt;/h2&gt;
&lt;p&gt;You can embed SVG directly in your markdown:&lt;/p&gt;
&lt;svg width="200" height="200" xmlns="http://www.w3.org/2000/svg"&gt;
 &lt;!-- Circle --&gt;
 &lt;circle cx="50" cy="50" r="40" fill="blue" stroke="navy" stroke-width="2"/&gt;
 &lt;!-- Rectangle --&gt;
 &lt;rect x="100" y="20" width="60" height="40" fill="red" stroke="darkred" stroke-width="2"/&gt;
 &lt;!-- Triangle (using polygon) --&gt;
 &lt;polygon points="130,100 160,160 100,160" fill="green" stroke="darkgreen" stroke-width="2"/&gt;
 &lt;!-- Line --&gt;
 &lt;line x1="20" y1="120" x2="80" y2="180" stroke="purple" stroke-width="3"/&gt;
 &lt;!-- Text --&gt;
&lt;p&gt;&lt;text x="10" y="190" font-family="Arial" font-size="14" fill="black"&gt;SVG Shapes&lt;/text&gt;
&lt;/svg&gt;&lt;/p&gt;
&lt;h2 id="styled-svg-with-css"&gt;Styled SVG with CSS&lt;/h2&gt;
&lt;p&gt;You can also style SVG elements with CSS:&lt;/p&gt;</description></item></channel></rss>